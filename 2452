그리드게임, 코드업 찾아보면 나옴
생각보다 많이어려워서 클론코딩함
bfs
잘하자..

#include <iostream>
#include <algorithm>
#include <string.h>
#include <vector>
#include <deque>

using namespace std;

int n, m;
int arr[100][100];
bool visited[100][100];
int dist[100][100];

int dy[] = { -1, 0, 1, 0 };
int dx[] = { 0, -1, 0, 1 };

void chk(int y, int x) {
	visited[y][x] = true;
	for (int i = 0; i < 4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];

		if (0 <= ny && ny < n && 0 <= nx && nx < m) {
			if(!visited[ny][nx] && arr[y][x] == arr[ny][nx]) chk(ny, nx);
		}
	}
}


int bfs(int a, int b) {
	deque<pair<int, int>> q;
	q.push_back({ a, b } );
	dist[a][b] = 0;
	int ans = -1;
	while (!q.empty()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop_front();
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (0 <= ny && ny < n && 0 <= nx && nx < m) {
				int weight = 0; 
				if (arr[ny][nx] != arr[y][x]) weight = 1;
				if (dist[ny][nx] > dist[y][x] + weight) {
					dist[ny][nx] = dist[y][x] + weight;
					ans = max(ans, dist[ny][nx]);

					if (weight) q.push_back({ ny, nx });
					else q.push_front({ ny,nx });
				}
			}
		}
	}
	return ans;
}

int main()
{
	int a = 0;
	if (a) cout << 1 << endl;
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> arr[i][j];
		}
	}

	memset(visited, false, sizeof(visited));
	vector<pair<int, int>> v;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (!visited[i][j]) {
				v.push_back({ i, j });
				chk(i, j);
			}
		}
	}

	int ans = 987654321;
	for (int i = 0; i < v.size(); i++) {
		memset(dist, 10001, sizeof(dist));
		dist[v[i].first][v[i].second] = 0;
		ans = min(ans, bfs(v[i].first, v[i].second));
	}
	cout << ans << endl;
}
